- Directivas
	* Las directivas son como atributos que pueden cambiar la apariencia o el comportamiento del DOM element
	* Estructurales: Puede modificar elementos del dom, mostrando u ocultando elementos
	* De atributos: ngclass/ngstyle adicionan o modifican los atributos de un elemento
- Decoradores
	* Es un tipo especial de declaración que se puede adjuntar a una clase, método, descriptor de acceso, propiedad o parámetro
	* Input() -> En un componente o directiva hijo, significa que la propiedad puede recibir su valor de su componente padre
	* Output() -> En un componente (o directiva) hijo permite que los datos fluyan del hijo al padre
- Change detection
	* Mecanismo que utiliza angular para detectar cuando el model cambia, renderizar la vista en relación a los cambios que han pasado.
	* Angular crea una especie de árbol que va desde arriba hacia abajo, cada componente tiene su propio detector de cambios
	* Los que produce los cambios pueden ser los eventos del mouse, llamadas ajax, setainterval, setTimeout
	* Tipos de change detection
		- OnPush -> Establece la estrategia en CheckOnce (bajo demanda), 
		- Default -> Establece la estrategia en CheckAlways, revisa en el arbol si ha habido cambios
- Pipe
	* Sirven para transformar información
	* Por default se definen como puros, de modo que angular ejecuta el pipe solo cuando detecta un cambio puro en el valor de entrada, los pipes inpuros
		cada vez que se ejecuta el ciclo de detección de cambios, angular volverá a transformar la data incluso si esta no ha cambiado
- Formularios
	* Template-drive forms
		- Son idelaes para crear formularios sencillos, sin tanta lógica
		- Se debe importar FormsModule
	* Formularios reactivos
		- Todo parte de una clase AbstractControl -> FormControl - FormGroup - FormArray
		- Se debe importar ReactiveFormsModule
- Resolver
	* Interface que las clases pueden implementar para ser un proveedor de datos.
	* Se debe usar con el router para resolver datos durante la navegación
	* Se debe implementar un método resolve() que se invoca cuando comienza la navegación.
	El router espera a que se resuelvan los datos antes de que finalmente se active la ruta
	* Sirve como proveedor de datos, funge como middleware, cuando la navegación inicia él se va a encargar si nosotros necesitamos los datos en esa ruta
	a donde vamos a renderizar el componente, ese renderizado no inicie hasta que tengamos los datos
	* Se usa con el router
	* Mencanismo para que cuando lleguemos a un componente, ya se tengan listos los datos a usar, y así no inciar el ciclo de vida del componente
- Lazy loading
	* Es la técnica para retrasar la carga de un módulo hasta que el usuario o la app lo necesitan
	* En el routing principal se usa forRoot y en lo módulos hijos el forChild
		- Básicamente angular utiliza el forRoot para poner todas las rutas en el módulo raíz, esto es, todo lo que es EAGER (no lazy loading) se
		carga de manera inmediata.
- Http interceptors
	* Intercepta una petición HTTP y la puede modificar, tanto una petición como una respuesta
- Programación reactiva
	* Orientada al manejo de streams asincronos y la propagación de cambios
	* RXJS -> Libreria para componer programas asíncronos y basados en eventos usando secuencias observables
		- Nos permite hacer programación reactiva. No es una librería específica para Angular, se puede usar en otras tecnologías
	* Observable -> No es maás que un stream de datos
	* Stream de datos -> Representa una relación de 1 a muchos, y está basado en un patrón observer que es donde hay 3 grandes protagonistas (observable, observadores, suscripciones)
	* Subject -> Tiene el mismo comportamiento que un observable, pero este puede compartir data con varios observadores u observers
		- Subject, behavior subject, replay subject, async subject
	* Promise vs Observable
		- Promise:
			* Se ejcuta inmediatamente
			* Emite un solo valor
			* Envia los errores a la promesa hija
			* Usa la clausula .then()
		- Observable
			* No comienza hasta la suscripción
			* Múltiples valores a lo largo del tiempo
			* Proporciona operadores
- Content projection
	* Patron para proyectar/insertar contenido en otros componentes
- Ng-container
	* Puede contener directivas estructurales y no añade ningún elemento al DOM
- Ng-Template
	- Ofrece una plantilla que no se renderiza por defecto, si no que notros decidimos cuando queremos que se muestre